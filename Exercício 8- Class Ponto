print('Exercício 8')

'''class Ponto:
    """ A classe Ponto representa e manipula as coordenadas x,y . """

    def __init__(self):
        """ Cria um novo ponto posicionado na origem. """
        self.x = 0
        self.y = 0



p = Ponto()         # Instanciar um objeto do tipo Ponto
q = Ponto()


print(p.x, p.y, q.x, q.y)

        
from turtle import Turtle

tess = Turtle()     # Instantiar objetos do tipo Turtle
alex = Turtle()


p = Ponto()
p.x = 3
p.y = 4
print(p.x, p.y)
print(type(p))
print(type(p.x))

class Ponto:
    """ A classe Ponto representa e manipula as coordenadas x,y . """

    def __init__(self, x=0, y=0):
        """ Inicializa em x, y o novo ponto criado pela classe. """
        self.x = x
        self.y = y




p = Ponto(4, 2)
q = Ponto(6, 3)
r = Ponto()       # r representa a origem (0, 0)
print(p.x, q.y, r.x)'''


class Ponto:
    """ Cria um novo Ponto, com coordenadas x, y """

    def __init__(self, x=0, y=0):
        """ Inicializa em x, y o novo ponto criado pela classe """
        self.x = x
        self.y = y

    def distancia_da_origem(self):
        """ Calcula minha distânica da origem """
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5
        
p = Ponto(3, 4)                   # instanciando um objeto do tipo Ponto
print(p.x)                        # acessando seus atributos
print(p.y)
print("distancia da origem para p: ", p.distancia_da_origem())    # distância da origem
q = Ponto(5, 12)
print(q.x)
print(q.y)
print("distancia da origem para q: ", q.distancia_da_origem())
r = Ponto()
print(r.x)
print(r.y)
print("distancia da origem para r: ", r.distancia_da_origem())
